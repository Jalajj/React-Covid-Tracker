{"version":3,"sources":["components/Chart/Chart.module.css","components/Countrypicker/countrypicker.module.css","App.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Countrypicker/Countrypicker.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e66b1e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1K2lJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countrypicker_formControl__1d6yU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3PoHD\",\"image\":\"App_image__3rYSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Nl48\",\"card\":\"Cards_card__2MvLW\",\"infected\":\"Cards_infected__2vc-W\",\"recovered\":\"Cards_recovered__1EHZ9\",\"deaths\":\"Cards_deaths__3c6-z\"};","import React from \"react\";\r\nimport {Card, CardContent,Typography,Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from \"classnames\";\r\n\r\n\r\nconst Cards =({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return \"Loading...\";\r\n    }\r\n    \r\n    return(\r\n      <div className={styles.container}>\r\n          <Grid container spacing ={3} justify=\"center\">\r\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                  <CardContent>\r\n                      <Typography color=\"textSecondary\"\r\n                      gutterBottom>Infected</Typography>\r\n                      <Typography variant=\"h5\">\r\n                          <CountUp \r\n                              start={0}\r\n                              end={confirmed.value}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                          />\r\n                      </Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString}</Typography>\r\n                      <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                  <CardContent>\r\n                      <Typography color=\"textSecondary\"\r\n                      gutterBottom>Recovered</Typography>\r\n                      <Typography variant=\"h5\">   <CountUp \r\n                              start={0}\r\n                              end={recovered.value}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                          /></Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString}</Typography>\r\n                      <Typography variant=\"body2\"> Number of recoveries from COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card}xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                  <CardContent>\r\n                      <Typography color=\"textSecondary\"\r\n                      gutterBottom>Deaths</Typography>\r\n                      <Typography variant=\"h5\">\r\n                      <CountUp \r\n                              start={0}\r\n                              end={deaths.value}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                          /></Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString}</Typography>\r\n                      <Typography variant=\"body2\"> Number of deaths caused by COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n          </Grid>\r\n      </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url =\"https://covid19.mathdro.id/api\";\r\n\r\n export const fetchData = async (country) => {\r\n     let changeableUrl = url ;\r\n\r\n     if(country){\r\n         changeableUrl = `${url}/countries/${country}`\r\n     }\r\n\r\n\r\n    try{\r\nconst {data} = await axios.get(changeableUrl);\r\n const modifiedData = {\r\n     confirmed: data.confirmed,\r\n     recovered:data.recovered,\r\n     deaths:data.deaths,\r\n     lastUpdate: data.lastUpdate\r\n }\r\n\r\nreturn modifiedData;\r\n    }catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n           confirmed:dailyData.confirmed.total,\r\n           deaths:dailyData.deaths.total,\r\n           date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React,{useState, useEffect} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport {fetchCountries} from \"../../api\";\r\nimport styles from \"./countrypicker.module.css\";\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    \r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\nexport default CountryPicker;","import React from \"react\";\nimport Card from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\"\nimport CountryPicker from \"./components/Countrypicker/Countrypicker\";\nimport styles from \"./App.module.css\";\nimport {fetchData} from \"./api\";\n\nclass App extends React.Component {\n  state={\n    data:{},\n    country:'',\n  }\n\n   async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData});\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n   \n    //fetch the data \n    // set the data \n    this.setState({data:fetchedData, country:country});\n\n  }\n\n  \n  render(){\n    const {data, country} = this.state;\n  return (\n    \n    <div className={styles.container}>\n    <h1>COVID-19 TRACKER</h1>\n  <p>MADE BY JALAJ</p>\n    \n      <Card data={data}/>\n     <CountryPicker handleCountryChange= {this.handleCountryChange} />\n     <Chart data={data} country={country} />\n     \n    </div>\n    \n     \n  );\n}}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}